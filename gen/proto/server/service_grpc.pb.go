// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/server/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdentityService_IsAuth_FullMethodName               = "/proto.IdentityService/IsAuth"
	IdentityService_CurrentUser_FullMethodName          = "/proto.IdentityService/CurrentUser"
	IdentityService_Login_FullMethodName                = "/proto.IdentityService/Login"
	IdentityService_Logout_FullMethodName               = "/proto.IdentityService/Logout"
	IdentityService_Refresh_FullMethodName              = "/proto.IdentityService/Refresh"
	IdentityService_RegisterStart_FullMethodName        = "/proto.IdentityService/RegisterStart"
	IdentityService_RegisterPending_FullMethodName      = "/proto.IdentityService/RegisterPending"
	IdentityService_RegisterFinish_FullMethodName       = "/proto.IdentityService/RegisterFinish"
	IdentityService_ResetPasswordStart_FullMethodName   = "/proto.IdentityService/ResetPasswordStart"
	IdentityService_ResetPasswordPending_FullMethodName = "/proto.IdentityService/ResetPasswordPending"
	IdentityService_ResetPasswordFinish_FullMethodName  = "/proto.IdentityService/ResetPasswordFinish"
	IdentityService_UpdateEmailStart_FullMethodName     = "/proto.IdentityService/UpdateEmailStart"
	IdentityService_UpdateEmailFinish_FullMethodName    = "/proto.IdentityService/UpdateEmailFinish"
)

// IdentityServiceClient is the client API for IdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityServiceClient interface {
	IsAuth(ctx context.Context, in *IsAuthRequest, opts ...grpc.CallOption) (*IsAuthReponse, error)
	CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUserReponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshReponse, error)
	RegisterStart(ctx context.Context, in *RegisterStartRequest, opts ...grpc.CallOption) (*RegisterStartReponse, error)
	RegisterPending(ctx context.Context, in *RegisterPendingRequest, opts ...grpc.CallOption) (*RegisterPendingReponse, error)
	RegisterFinish(ctx context.Context, in *RegisterFinishRequest, opts ...grpc.CallOption) (*RegisterFinishReponse, error)
	ResetPasswordStart(ctx context.Context, in *ResetPasswordStartRequest, opts ...grpc.CallOption) (*ResetPasswordStartReponse, error)
	ResetPasswordPending(ctx context.Context, in *ResetPasswordPendingRequest, opts ...grpc.CallOption) (*ResetPasswordPendingReponse, error)
	ResetPasswordFinish(ctx context.Context, in *ResetPasswordFinishRequest, opts ...grpc.CallOption) (*ResetPasswordFinishReponse, error)
	UpdateEmailStart(ctx context.Context, in *UpdateEmailStartRequest, opts ...grpc.CallOption) (*UpdateEmailStartReponse, error)
	UpdateEmailFinish(ctx context.Context, in *UpdateEmailFinishRequest, opts ...grpc.CallOption) (*UpdateEmailFinishReponse, error)
}

type identityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityServiceClient(cc grpc.ClientConnInterface) IdentityServiceClient {
	return &identityServiceClient{cc}
}

func (c *identityServiceClient) IsAuth(ctx context.Context, in *IsAuthRequest, opts ...grpc.CallOption) (*IsAuthReponse, error) {
	out := new(IsAuthReponse)
	err := c.cc.Invoke(ctx, IdentityService_IsAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUserReponse, error) {
	out := new(CurrentUserReponse)
	err := c.cc.Invoke(ctx, IdentityService_CurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReponse, error) {
	out := new(LoginReponse)
	err := c.cc.Invoke(ctx, IdentityService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReponse, error) {
	out := new(LogoutReponse)
	err := c.cc.Invoke(ctx, IdentityService_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshReponse, error) {
	out := new(RefreshReponse)
	err := c.cc.Invoke(ctx, IdentityService_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RegisterStart(ctx context.Context, in *RegisterStartRequest, opts ...grpc.CallOption) (*RegisterStartReponse, error) {
	out := new(RegisterStartReponse)
	err := c.cc.Invoke(ctx, IdentityService_RegisterStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RegisterPending(ctx context.Context, in *RegisterPendingRequest, opts ...grpc.CallOption) (*RegisterPendingReponse, error) {
	out := new(RegisterPendingReponse)
	err := c.cc.Invoke(ctx, IdentityService_RegisterPending_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RegisterFinish(ctx context.Context, in *RegisterFinishRequest, opts ...grpc.CallOption) (*RegisterFinishReponse, error) {
	out := new(RegisterFinishReponse)
	err := c.cc.Invoke(ctx, IdentityService_RegisterFinish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ResetPasswordStart(ctx context.Context, in *ResetPasswordStartRequest, opts ...grpc.CallOption) (*ResetPasswordStartReponse, error) {
	out := new(ResetPasswordStartReponse)
	err := c.cc.Invoke(ctx, IdentityService_ResetPasswordStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ResetPasswordPending(ctx context.Context, in *ResetPasswordPendingRequest, opts ...grpc.CallOption) (*ResetPasswordPendingReponse, error) {
	out := new(ResetPasswordPendingReponse)
	err := c.cc.Invoke(ctx, IdentityService_ResetPasswordPending_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ResetPasswordFinish(ctx context.Context, in *ResetPasswordFinishRequest, opts ...grpc.CallOption) (*ResetPasswordFinishReponse, error) {
	out := new(ResetPasswordFinishReponse)
	err := c.cc.Invoke(ctx, IdentityService_ResetPasswordFinish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateEmailStart(ctx context.Context, in *UpdateEmailStartRequest, opts ...grpc.CallOption) (*UpdateEmailStartReponse, error) {
	out := new(UpdateEmailStartReponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateEmailStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateEmailFinish(ctx context.Context, in *UpdateEmailFinishRequest, opts ...grpc.CallOption) (*UpdateEmailFinishReponse, error) {
	out := new(UpdateEmailFinishReponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateEmailFinish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServiceServer is the server API for IdentityService service.
// All implementations must embed UnimplementedIdentityServiceServer
// for forward compatibility
type IdentityServiceServer interface {
	IsAuth(context.Context, *IsAuthRequest) (*IsAuthReponse, error)
	CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUserReponse, error)
	Login(context.Context, *LoginRequest) (*LoginReponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshReponse, error)
	RegisterStart(context.Context, *RegisterStartRequest) (*RegisterStartReponse, error)
	RegisterPending(context.Context, *RegisterPendingRequest) (*RegisterPendingReponse, error)
	RegisterFinish(context.Context, *RegisterFinishRequest) (*RegisterFinishReponse, error)
	ResetPasswordStart(context.Context, *ResetPasswordStartRequest) (*ResetPasswordStartReponse, error)
	ResetPasswordPending(context.Context, *ResetPasswordPendingRequest) (*ResetPasswordPendingReponse, error)
	ResetPasswordFinish(context.Context, *ResetPasswordFinishRequest) (*ResetPasswordFinishReponse, error)
	UpdateEmailStart(context.Context, *UpdateEmailStartRequest) (*UpdateEmailStartReponse, error)
	UpdateEmailFinish(context.Context, *UpdateEmailFinishRequest) (*UpdateEmailFinishReponse, error)
	mustEmbedUnimplementedIdentityServiceServer()
}

// UnimplementedIdentityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityServiceServer struct {
}

func (UnimplementedIdentityServiceServer) IsAuth(context.Context, *IsAuthRequest) (*IsAuthReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuth not implemented")
}
func (UnimplementedIdentityServiceServer) CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUserReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentUser not implemented")
}
func (UnimplementedIdentityServiceServer) Login(context.Context, *LoginRequest) (*LoginReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedIdentityServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedIdentityServiceServer) Refresh(context.Context, *RefreshRequest) (*RefreshReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedIdentityServiceServer) RegisterStart(context.Context, *RegisterStartRequest) (*RegisterStartReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStart not implemented")
}
func (UnimplementedIdentityServiceServer) RegisterPending(context.Context, *RegisterPendingRequest) (*RegisterPendingReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPending not implemented")
}
func (UnimplementedIdentityServiceServer) RegisterFinish(context.Context, *RegisterFinishRequest) (*RegisterFinishReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFinish not implemented")
}
func (UnimplementedIdentityServiceServer) ResetPasswordStart(context.Context, *ResetPasswordStartRequest) (*ResetPasswordStartReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordStart not implemented")
}
func (UnimplementedIdentityServiceServer) ResetPasswordPending(context.Context, *ResetPasswordPendingRequest) (*ResetPasswordPendingReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordPending not implemented")
}
func (UnimplementedIdentityServiceServer) ResetPasswordFinish(context.Context, *ResetPasswordFinishRequest) (*ResetPasswordFinishReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordFinish not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateEmailStart(context.Context, *UpdateEmailStartRequest) (*UpdateEmailStartReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailStart not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateEmailFinish(context.Context, *UpdateEmailFinishRequest) (*UpdateEmailFinishReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailFinish not implemented")
}
func (UnimplementedIdentityServiceServer) mustEmbedUnimplementedIdentityServiceServer() {}

// UnsafeIdentityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityServiceServer will
// result in compilation errors.
type UnsafeIdentityServiceServer interface {
	mustEmbedUnimplementedIdentityServiceServer()
}

func RegisterIdentityServiceServer(s grpc.ServiceRegistrar, srv IdentityServiceServer) {
	s.RegisterService(&IdentityService_ServiceDesc, srv)
}

func _IdentityService_IsAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).IsAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_IsAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).IsAuth(ctx, req.(*IsAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CurrentUser(ctx, req.(*CurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RegisterStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RegisterStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_RegisterStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RegisterStart(ctx, req.(*RegisterStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RegisterPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RegisterPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_RegisterPending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RegisterPending(ctx, req.(*RegisterPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RegisterFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RegisterFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_RegisterFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RegisterFinish(ctx, req.(*RegisterFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ResetPasswordStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ResetPasswordStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ResetPasswordStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ResetPasswordStart(ctx, req.(*ResetPasswordStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ResetPasswordPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ResetPasswordPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ResetPasswordPending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ResetPasswordPending(ctx, req.(*ResetPasswordPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ResetPasswordFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ResetPasswordFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ResetPasswordFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ResetPasswordFinish(ctx, req.(*ResetPasswordFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateEmailStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateEmailStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateEmailStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateEmailStart(ctx, req.(*UpdateEmailStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateEmailFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateEmailFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateEmailFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateEmailFinish(ctx, req.(*UpdateEmailFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityService_ServiceDesc is the grpc.ServiceDesc for IdentityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IdentityService",
	HandlerType: (*IdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAuth",
			Handler:    _IdentityService_IsAuth_Handler,
		},
		{
			MethodName: "CurrentUser",
			Handler:    _IdentityService_CurrentUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _IdentityService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _IdentityService_Logout_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _IdentityService_Refresh_Handler,
		},
		{
			MethodName: "RegisterStart",
			Handler:    _IdentityService_RegisterStart_Handler,
		},
		{
			MethodName: "RegisterPending",
			Handler:    _IdentityService_RegisterPending_Handler,
		},
		{
			MethodName: "RegisterFinish",
			Handler:    _IdentityService_RegisterFinish_Handler,
		},
		{
			MethodName: "ResetPasswordStart",
			Handler:    _IdentityService_ResetPasswordStart_Handler,
		},
		{
			MethodName: "ResetPasswordPending",
			Handler:    _IdentityService_ResetPasswordPending_Handler,
		},
		{
			MethodName: "ResetPasswordFinish",
			Handler:    _IdentityService_ResetPasswordFinish_Handler,
		},
		{
			MethodName: "UpdateEmailStart",
			Handler:    _IdentityService_UpdateEmailStart_Handler,
		},
		{
			MethodName: "UpdateEmailFinish",
			Handler:    _IdentityService_UpdateEmailFinish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server/service.proto",
}
